//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Mon May  6 11:34:43 2019 by ROOT version 6.06/08)
//      from the StreamerInfo in file /hepstore/burdin/data/lz_Miniproduction_1_lzap.root
//////////////////////////////////////////////////////////


#ifndef RQ__SingleScatters_h
#define RQ__SingleScatters_h
namespace RQ {
class SingleScatters;
} // end of namespace.

#include "TObject.h"
#include "Riostream.h"
#include <vector>
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;

namespace RQ {
class SingleScatters : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         nSingleScatters;    //Number of single scatter interactions found in this event
   vector<int> s1PulseID;          //ID of S1 pulse
   vector<bool> s1IsHG;             //Is the S1 pulse from HG?
   vector<int>  s2PulseID;          //ID of S2 pulse
   vector<bool> s2IsHG;             //Is the S2 pulse from HG?
   vector<float> driftTime_ns;       //[ns]; Drift time
   vector<float> s1Area_phd;         //[phd]; Total area of summed pod from S1 pulse start to end
   vector<float> s2Area_phd;         //[phd]; Total area of summed pod from S2 pulse start to end
   vector<float> s1TopArea_phd;      //[phd]; Area of S1 in top array
   vector<float> s1BottomArea_phd;    //[phd]; Area of S1 in bottom array
   vector<float> s1TopCorrectionFactor;    //S1 correction factor for top array
   vector<float> s1BottomCorrectionFactor;    //S1 correction factor for bottom array
   vector<float> correctedS1TopArea_phd;      //[phd]; xyz-corrected S1 top area
   vector<float> correctedS1BottomArea_phd;    //[phd]; xyz-corrected S1 bottom area
   vector<float> correctedS1Area_phd;          //[phd]; xyz-corrected total area of summed pod from S1 pulse start to end
   vector<float> s2CorrectionFactor;           //S2 correction factor
   vector<float> correctedS2Area_phd;          //[phd]; Corrected total area of summed pod from S2 pulse start to end
   vector<float> x_cm;                         //[cm]; Reconstructed x-position of interaction
   vector<float> y_cm;                         //[cm]; Reconstructed y-position of interaction
   vector<float> xyChi2;                       //xy chi^2
   vector<float> correctedX_cm;                //[cm]; Corrected x-position of interaction
   vector<float> correctedY_cm;                //[cm]; Corrected y-position of interaction
   vector<float> correctedZ_cm;                //[cm]; Corrected z-position of interaction
   vector<float> s1PhotonCount;                //Number of photons in S1 pulse
   vector<float> correctedS1PhotonCount;       //Corrected Number of photons in S1 pulse
   vector<float> energyER_keV;                 //[keV]; Reconstructed ER energy of interaction
   vector<float> energyNR_keV;                 //[keV]; Reconstructer NR energy of interaction
   vector<float> skinPromptArea;               //[phd]; Total area in Skin PMTs within skin veto window
   vector<int>   nSkinPromptPulses;            //Number of pulses in Skin PMTs within skin veto window
   vector<vector<int> > skinPromptPulseIDs;           //IDs of skin pulses within skin veto window
   vector<float>        odPromptArea;                 //[phd]; Total area in OD PMTs within prompt OD coincidence window
   vector<int>          nODPromptPulses;              //Number of pulses in OD PMTs within prompt OD coincidence window
   vector<vector<int> > odPromptPulseIDs;             //IDs of OD pulses within prompt OD coincidence window
   vector<vector<float> > odDelayedAreas;               //[phd]; Total area in OD PMTs within delayed OD coincidence window
   vector<int>            nODDelayedPulses;             //Number of pulses in OD PMTs within delayed OD coincidence window
   vector<vector<int> >   odDelayedPulseIDs;            //IDs of OD pulses within delayed OD coincidence window

   SingleScatters();
   SingleScatters(const SingleScatters & );
   virtual ~SingleScatters();

   ClassDef(SingleScatters,4); // Generated by MakeProject.
};
} // namespace
#endif
