//////////////////////////////////////////////////////////
//   This class has been generated by TFile::MakeProject
//     (Mon May  6 11:34:43 2019 by ROOT version 6.06/08)
//      from the StreamerInfo in file /hepstore/burdin/data/lz_Miniproduction_1_lzap.root
//////////////////////////////////////////////////////////


#ifndef RQ__MultipleScatters_h
#define RQ__MultipleScatters_h
namespace RQ {
class MultipleScatters;
} // end of namespace.

#include "TObject.h"
#include "Riostream.h"
#include <vector>
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;
namespace std {} using namespace std;

namespace RQ {
class MultipleScatters : public TObject {

public:
// Nested classes declaration.

public:
// Data Members.
   int         nMultipleScatters;    //Number of multiple scatter interactions found in this event
   vector<int> s1PulseID;            //ID of the S1 pulse
   vector<bool> s1IsHG;               //Is the S1 from HG?
   vector<float> s1Area_phd;           //[phd]; Total area of summed pod from S1 pulse start to end
   vector<float> s1TopArea_phd;        //[phd]; Area of S1 in top array
   vector<float> s1BottomArea_phd;     //[phd]; Area of S1 in bottom array
   vector<int>   nS2s;                 //Number of S2s in this interaction
   vector<vector<int> > s2PulseIDs;           //IDs of the S2 pulses
   vector<vector<bool> > s2IsHG;               //Are the S2s from HG?
   vector<vector<float> > s2Area_phd;           //[phd]; Total areas of summed pods from S2 pulse starts to ends
   vector<vector<float> > s1TopCorrectionFactors;    //S1 correction factors for top array, separate factor for each drift time
   vector<vector<float> > s1BottomCorrectionFactors;    //S1 correction factors for bottom array, separate factor for each drift time
   vector<vector<float> > correctedS1TopAreas_phd;      //[phd]; Corrected S1 top areas, separate corrected area for each drift time
   vector<vector<float> > correctedS1BottomAreas_phd;    //[phd]; Corrected S1 bottom areas, separate corrected area for each drift time
   vector<vector<float> > correctedS1Areas_phd;          //[phd]; Corrected total S1 area, separate corrected area for each drift time
   vector<vector<float> > s2CorrectionFactors;           //Corrected factor for each S2
   vector<vector<float> > correctedS2Area_phd;           //[phd]; Corrected total areas of summed pods from S2 pulse starts to ends
   vector<vector<float> > driftTime_ns;                  //[ns]; Drift times
   vector<float>          weightedDriftTime_ns;          //[ns]; Weighted average drift time, weighted by S2 area
   vector<vector<float> > x_cm;                          //[cm]; Reconstructed x-positions of interactions
   vector<vector<float> > y_cm;                          //[cm]; Reconstructed y-positions of interactions
   vector<vector<float> > correctedX_cm;                 //[cm]; Corrected x-positions of interactions
   vector<vector<float> > correctedY_cm;                 //[cm]; Corrected y-positions of interactions
   vector<vector<float> > correctedZ_cm;                 //[cm]; Corrected z-positions of interactions
   vector<float>          energyER_keV;                  //[keV]; Reconstructed ER energy of interaction
   vector<float>          energyNR_keV;                  //[keV]; Reconstructed NR energy of interaction

   MultipleScatters();
   MultipleScatters(const MultipleScatters & );
   virtual ~MultipleScatters();

   ClassDef(MultipleScatters,3); // Generated by MakeProject.
};
} // namespace
#endif
